import {promises as fs} from 'fs';
import Path from 'path';
import CleanCSS from 'clean-css';
import HTMLMinifier from 'html-minifier';
import Handlebars from 'handlebars';
import Babel from '@babel/core';
import Terser from 'terser';
import {
  CLIENT_DIST_HTML,
  CLIENT_SRC_DIR,
  CLIENT_SRC_HTML_TEMPLATE,
  DATA_PARSED_JSON,
  DESCRIPTION,
  EXTRACT_WORDS_FN,
  FIELDS,
  VALID_WORD_REGEX,
  WORD_MAP,
} from '../const';

const DEBUG = process.env.MSC_DEBUG === '1';
const GOOGLE_ANALYTICS = process.env.MSC_GA;

if (DEBUG) {
  console.log(`Debug mode`);
}

const generate_analytics = (tracking_id: string) => `
  <script async src="https://www.googletagmanager.com/gtag/js?id=${tracking_id}"></script>
  <script>
    window.dataLayer = window.dataLayer || [];

    function gtag () {
      dataLayer.push(arguments);
    }

    gtag("js", new Date());

    gtag("config", "${tracking_id}");
  </script>
`;

const concatSrcFiles = async (ext: string): Promise<string> => {
  const files = await fs.readdir(CLIENT_SRC_DIR);
  const targetFiles = files.filter(f => f.toLowerCase().endsWith('.' + ext));
  const contents = await Promise.all(targetFiles.map(f => fs.readFile(Path.join(CLIENT_SRC_DIR, f), 'utf8')));
  return contents.join('');
};

const transpileJS = (js: string): Promise<string> => Babel.transformAsync(js, {
  plugins: [
    ['@babel/plugin-transform-arrow-functions'],
    ['@babel/plugin-transform-block-scoping'],
    ['@babel/plugin-transform-shorthand-properties'],
    ['@babel/plugin-transform-template-literals', {loose: true}],
    ['@babel/plugin-transform-parameters', {loose: true}],
    ['@babel/plugin-transform-destructuring', {loose: true, useBuiltIns: true}],
    ['@babel/plugin-proposal-object-rest-spread', {loose: true, useBuiltIns: true}],
    ['@babel/plugin-transform-spread', {loose: true}],
    ['@babel/plugin-transform-for-of', {assumeArray: true}],
  ],
}).then(res => res!.code!);

const minifyJS = (js: string) => {
  if (DEBUG) {
    return js;
  }
  const {error, warnings, code} = Terser.minify(js, {
    mangle: true,
    compress: {
      booleans: true,
      collapse_vars: true,
      comparisons: true,
      conditionals: true,
      dead_code: true,
      drop_console: true,
      drop_debugger: true,
      evaluate: true,
      hoist_funs: true,
      hoist_vars: false,
      if_return: true,
      join_vars: true,
      keep_fargs: false,
      keep_fnames: false,
      loops: true,
      negate_iife: true,
      properties: true,
      reduce_vars: true,
      sequences: true,
      unsafe: true,
      unused: true,
    },
    warnings: true,
  });
  if (error) {
    throw error;
  }
  if (warnings) {
    warnings.forEach(console.log);
  }
  return code;
};

const minifyHTML = (html: string): string => DEBUG ? html : HTMLMinifier.minify(html, {
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  decodeEntities: true,
  ignoreCustomFragments: [],
  includeAutoGeneratedTags: true,
  keepClosingSlash: false,
  minifyCSS: false,
  minifyJS: false,
  minifyURLs: false,
  preserveLineBreaks: false,
  preventAttributesEscaping: false,
  processConditionalComments: false,
  removeAttributeQuotes: true,
  removeComments: true,
  removeEmptyAttributes: false,
  removeEmptyElements: false,
  // Don't remove optional tags as this breaks IE 11
  // (it doesn't end <li>s properly sometimes)
  removeOptionalTags: false,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  removeTagWhitespace: true,
  sortAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
});

const minifyCSS = (css: string) => DEBUG ? css : new CleanCSS({
  returnPromise: true,
}).minify(css).then(({styles}) => styles);

Promise.all([
  concatSrcFiles('js')
    .then(transpileJS)
    .then(minifyJS),

  concatSrcFiles('css')
    .then(minifyCSS),

  fs.readFile(CLIENT_SRC_HTML_TEMPLATE, 'utf8'),

  fs.readFile(DATA_PARSED_JSON, 'utf8')
    .then(d => JSON.parse(d).length),
])
  .then(([js, css, html, jobsCount]) => Handlebars.compile(html)({
    analytics: GOOGLE_ANALYTICS && generate_analytics(GOOGLE_ANALYTICS),
    description: DESCRIPTION,
    wordsExtractor: EXTRACT_WORDS_FN.toString()
      .replace('VALID_WORD_REGEX', VALID_WORD_REGEX.toString())
      .replace('WORD_MAP', JSON.stringify(WORD_MAP)),
    validWordRegExp: VALID_WORD_REGEX.toString(),
    jobsCount,
    fields: FIELDS,
    script: js,
    style: css,
  }))
  .then(minifyHTML)
  .then(html => fs.writeFile(CLIENT_DIST_HTML, html));
